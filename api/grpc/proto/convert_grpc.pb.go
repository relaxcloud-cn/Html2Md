// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/grpc/proto/convert.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConvertService_Convert_FullMethodName          = "/html2md.v1.ConvertService/Convert"
	ConvertService_ConvertBatch_FullMethodName     = "/html2md.v1.ConvertService/ConvertBatch"
	ConvertService_HealthCheck_FullMethodName      = "/html2md.v1.ConvertService/HealthCheck"
	ConvertService_GetConverterInfo_FullMethodName = "/html2md.v1.ConvertService/GetConverterInfo"
)

// ConvertServiceClient is the client API for ConvertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HTML转Markdown转换服务
type ConvertServiceClient interface {
	// 转换HTML为Markdown
	Convert(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error)
	// 批量转换HTML为Markdown
	ConvertBatch(ctx context.Context, in *BatchConvertRequest, opts ...grpc.CallOption) (*BatchConvertResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 获取转换器信息
	GetConverterInfo(ctx context.Context, in *GetConverterInfoRequest, opts ...grpc.CallOption) (*GetConverterInfoResponse, error)
}

type convertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConvertServiceClient(cc grpc.ClientConnInterface) ConvertServiceClient {
	return &convertServiceClient{cc}
}

func (c *convertServiceClient) Convert(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertResponse)
	err := c.cc.Invoke(ctx, ConvertService_Convert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *convertServiceClient) ConvertBatch(ctx context.Context, in *BatchConvertRequest, opts ...grpc.CallOption) (*BatchConvertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchConvertResponse)
	err := c.cc.Invoke(ctx, ConvertService_ConvertBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *convertServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ConvertService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *convertServiceClient) GetConverterInfo(ctx context.Context, in *GetConverterInfoRequest, opts ...grpc.CallOption) (*GetConverterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConverterInfoResponse)
	err := c.cc.Invoke(ctx, ConvertService_GetConverterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConvertServiceServer is the server API for ConvertService service.
// All implementations must embed UnimplementedConvertServiceServer
// for forward compatibility.
//
// HTML转Markdown转换服务
type ConvertServiceServer interface {
	// 转换HTML为Markdown
	Convert(context.Context, *ConvertRequest) (*ConvertResponse, error)
	// 批量转换HTML为Markdown
	ConvertBatch(context.Context, *BatchConvertRequest) (*BatchConvertResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 获取转换器信息
	GetConverterInfo(context.Context, *GetConverterInfoRequest) (*GetConverterInfoResponse, error)
	mustEmbedUnimplementedConvertServiceServer()
}

// UnimplementedConvertServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConvertServiceServer struct{}

func (UnimplementedConvertServiceServer) Convert(context.Context, *ConvertRequest) (*ConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedConvertServiceServer) ConvertBatch(context.Context, *BatchConvertRequest) (*BatchConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertBatch not implemented")
}
func (UnimplementedConvertServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedConvertServiceServer) GetConverterInfo(context.Context, *GetConverterInfoRequest) (*GetConverterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConverterInfo not implemented")
}
func (UnimplementedConvertServiceServer) mustEmbedUnimplementedConvertServiceServer() {}
func (UnimplementedConvertServiceServer) testEmbeddedByValue()                        {}

// UnsafeConvertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConvertServiceServer will
// result in compilation errors.
type UnsafeConvertServiceServer interface {
	mustEmbedUnimplementedConvertServiceServer()
}

func RegisterConvertServiceServer(s grpc.ServiceRegistrar, srv ConvertServiceServer) {
	// If the following call pancis, it indicates UnimplementedConvertServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConvertService_ServiceDesc, srv)
}

func _ConvertService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConvertService_Convert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertServiceServer).Convert(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConvertService_ConvertBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertServiceServer).ConvertBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConvertService_ConvertBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertServiceServer).ConvertBatch(ctx, req.(*BatchConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConvertService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConvertService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConvertService_GetConverterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConverterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertServiceServer).GetConverterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConvertService_GetConverterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertServiceServer).GetConverterInfo(ctx, req.(*GetConverterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConvertService_ServiceDesc is the grpc.ServiceDesc for ConvertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConvertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "html2md.v1.ConvertService",
	HandlerType: (*ConvertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Convert",
			Handler:    _ConvertService_Convert_Handler,
		},
		{
			MethodName: "ConvertBatch",
			Handler:    _ConvertService_ConvertBatch_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ConvertService_HealthCheck_Handler,
		},
		{
			MethodName: "GetConverterInfo",
			Handler:    _ConvertService_GetConverterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/convert.proto",
}
